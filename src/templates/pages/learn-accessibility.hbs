---
layoutFile: default
dataFile: common/*
---
{{#extend "layout"}}
  {{#content "head"}}
    <title>Learn How to Develop with Accessibility in Mind | Full Stack Web Development</title>
    <meta name="description" content="Accessible websites can be maintainable if websites and tools are developed with best practices. Learn how to start thinking with accessible web development in mind.">
  {{/content}}

  {{#content "body"}}
    {{> _header}}
    <main class="obj-layout-width">
      <h1 class="cmp-title">Accessibility</h1>
      {{> _sub-menu}}
      {{> _summary a11y}}
      {{> _resources a11y}}
  <div class="obj-layout-spacing theme-bg" id="cheatsheet">
  <h2 class="cmp-subtitle cmp-subtitle--theme">Cheat Sheet</h2>
  {{#markdown}}
  ### Attributes

  Add an aria-label a link that doesn't have descriptive text
  ```
  aria-label="Explain what the screen reader should read"
  ```

  Aria-expanded tells a screen reader if an element, such as a hamburger menu, is open or closed
  ```
  aria-expanded="true"
  ```

  Always have an alt attribute in an img tags
  ```
  alt="Explain what your picture is showing"
  ```

  Hide excessive or decorative elements from a screen reader
  ```
  aria-hidden="true"
  ```

  **Toggle Aria Attribute**
  For changing aria attribute values when a user interacts with an element such as an FAQ toggle or collapsed navigation
  ```
  export const toggleAria = (el, ariaAttr) => {
    let attr = el.getAttribute(`${ariaAttr}`);
    if (attr === 'false') {
      attr = 'true';
    } else {
      attr = 'false';
    }
    el.setAttribute(`${ariaAttr}`, attr);
  };
  ```
  {{/markdown}}
  </div>
      {{> _projects a11y}}
    </main>
  {{> _footer}}
  {{/content}}
{{/extend}}